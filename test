
<!-- Title Section -->
<div class="d-flex flex-row align-items-center justify-content-between mb-3 titleTop">
    <h2 class="d-flex align-items-center">
        <svg width="26" height="26" fill="currentColor" class="bi bi-node-plus mx-1" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M11 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8M6.025 7.5a5 5 0 1 1 0 1H4A1.5 1.5 0 0 1 2.5 10h-1A1.5 1.5 0 0 1 0 8.5v-1A1.5 1.5 0 0 1 1.5 6h1A1.5 1.5 0 0 1 4 7.5zM11 5a.5.5 0 0 1 .5.5v2h2a.5.5 0 0 1 0 1h-2v2a.5.5 0 0 1-1 0v-2h-2a.5.5 0 0 1 0-1h2v-2A.5.5 0 0 1 11 5M1.5 7a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5z"/>
        </svg>
        Product Feature
    </h2>
    <a href="../auth/dashboard.php?page=home" class="backBtn">
        <svg width="24" height="24" fill="currentColor" class="bi bi-arrow-left-short" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M12 8a.5.5 0 0 1-.5.5H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5a.5.5 0 0 1 .5.5"></path>
        </svg>
        <span>Back</span>
    </a>
</div>

<!-- Main Container -->
<div class="container px-0">
    <div class="row">
        <!-- Search Product -->
        <div class="col-12 col-md-3">
            <label for="productSearch" class="form-label">Search in Product:</label>
            <div class="input-box" style="width: 100%; margin:0 0 10px 0;">
                <svg width="24" height="24" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"></path>
                </svg>
                <input type="text" id="productSearch" name="searchProduct" placeholder="Type to search by name P/N or Tag...">
                <div id="productResults"></div>
            </div>
        </div>
    </div>

    <!-- Dynamic Features Form -->
    <form method="POST" action="" id="featureForm" style="display:none;">
        <input type="hidden" name="product_id" id="product_id">

        <!-- Features Container (dynamic rows will be injected here) -->
        <div id="featuresContainer" class="row d-flex align-items-end bg-light rounded border my-1 p-2">
            <!-- JS will insert feature fields here -->
        </div>

        <!-- Submit Button -->
        <div class="d-flex flex-row justify-content-end align-items-center w-100 px-1 mt-3">
            <button type="submit" class="btn btn-primary" title="Submit">Submit</button>
        </div>
    </form>
</div>



<script>
// This script handles the dynamic loading and saving of product feature values.
// It includes an AJAX search for products, a dynamic form generator for features,
// and client-side form submission.
// Define main form elements and fields
const productSearch = document.getElementById('productSearch');
const productResults = document.getElementById('productResults');
const featuresContainer = document.getElementById('featuresContainer');
const featureForm = document.getElementById('featureForm');
const productIdInput = document.getElementById('product_id');

// Search for products in the database
productSearch.addEventListener('input', () => {
    const q = productSearch.value.trim();
    if (q.length < 2) {
        // Hide product results if input is less than 2 characters
        productResults.style.display = 'none';
        productResults.innerHTML = '';
        return;
    }
    // Send search request to the server
    fetch(`../manager/product_feature_values.php?search_product=${encodeURIComponent(q)}`)
        .then(res => res.json())
        .then(data => {
            productResults.innerHTML = '';
            if (data.length > 0) {
                // Display matching products
                data.forEach(p => {
                    const div = document.createElement('div');
                    div.textContent = `${p.name} (PN: ${p.part_number})`;
                    div.style.cursor = 'pointer';
                    div.onclick = () => selectProduct(p.id, p.name);
                    productResults.appendChild(div);
                });
                productResults.style.display = 'block';
            } else {
                // Show message when no products are found
                productResults.innerHTML = '<div>No products found.</div>';
                productResults.style.display = 'block';
            }
        });
});

// Select a product from search results
function selectProduct(id, name) {
    productIdInput.value = id;
    productSearch.value = name;
    productResults.style.display = 'none';

    // Hide form until features are loaded
    featureForm.style.display = 'none';
    featuresContainer.innerHTML = '<div class="text-center text-muted w-100">Loading features...</div>';

    // Fetch product features from the server
    fetch(`../manager/product_feature_values.php?product_id=${id}`)
        .then(res => res.json())
        .then(features => {
            featuresContainer.innerHTML = '';
            if (features.status === 'error') {
                Swal.fire('Error', features.message, 'error');
                return;
            }
            if (features.length === 0) {
                Swal.fire('No Features', 'This product category has no features assigned.', 'info');
                return;
            }

            // Create feature input fields dynamically
            features.forEach(f => {
                const row = document.createElement('div');
                row.className = 'col-12 d-flex flex-wrap align-items-end my-2';

                const requiredAttr = f.is_required ? 'required' : '';
                let inputHtml = '';

                // Determine input type based on data_type
                switch (f.data_type) {
                    case 'decimal(12,3)':
                        inputHtml = `<input type="text" class="form-control" name="features[${f.id}][value]" value="${f.value}" placeholder="Value" pattern="[0-9]+(\\.[0-9]{1,3})?" ${requiredAttr}>`;
                        break;
                    case 'boolean':
                        const isChecked = f.value === '1';
                        inputHtml = `
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="feature-${f.id}" name="features[${f.id}][value]" value="1" ${isChecked ? 'checked' : ''}>
                                <label class="form-check-label" for="feature-${f.id}">${f.name}${f.is_required ? '*' : ''}</label>
                            </div>
                        `;
                        break;
                    case 'varchar(50)':
                        inputHtml = `<input type="text" class="form-control" name="features[${f.id}][value]" value="${f.value}" placeholder="Value" ${requiredAttr}>`;
                        break;
                    case 'TEXT':
                        inputHtml = `<textarea class="form-control" name="features[${f.id}][value]" placeholder="Value" ${requiredAttr}>${f.value}</textarea>`;
                        break;
                    default:
                        inputHtml = `<input type="text" class="form-control" name="features[${f.id}][value]" value="${f.value}" placeholder="Value" ${requiredAttr}>`;
                }

                // Add label separately for non-boolean fields
                if (f.data_type !== 'boolean') {
                    const label = document.createElement('label');
                    label.className = 'form-label me-2';
                    label.textContent = f.name + (f.is_required ? '*' : '');
                    row.appendChild(label);
                }

                // Column for value
                const inputCol = document.createElement('div');
                inputCol.className = 'col-6 col-md-4 px-1';
                inputCol.innerHTML = inputHtml;
                row.appendChild(inputCol);

                // Column for unit (if exists)
                if (f.unit) {
                    const unitCol = document.createElement('div');
                    unitCol.className = 'col-6 col-md-2 px-1';
                    unitCol.innerHTML = unitSelect(f.unit, f.unit_value, f.id);
                    row.appendChild(unitCol);
                }

                // Append row to features container
                featuresContainer.appendChild(row);
            });

            // Show form after loading features
            featureForm.style.display = 'block';
        })
        .catch(error => {
            console.error('Error fetching features:', error);
            Swal.fire('Error', 'Failed to load features. Please try again.', 'error');
        });
}

// Build select dropdown for units
function unitSelect(unitString, selectedUnit, featureId) {
    const units = unitString.split(',').map(u => u.trim());
    const optionsHtml = units.map(u => {
        const isSelected = u === selectedUnit ? 'selected' : '';
        return `<option value="${u}" ${isSelected}>${u}</option>`;
    }).join('');
    return `<select class="form-select" name="features[${featureId}][unit]">${optionsHtml}</select>`;
}

// Validate and submit the form
featureForm.addEventListener('submit', e => {
    e.preventDefault();

    // Validate required fields
    const requiredInputs = document.querySelectorAll('#featuresContainer [required]');
    let hasEmptyRequired = false;
    requiredInputs.forEach(input => {
        if (!input.value.trim()) {
            hasEmptyRequired = true;
            input.style.border = '1px solid red';
        } else {
            input.style.border = '';
        }
    });

    if (hasEmptyRequired) {
        Swal.fire('Validation Error', 'Please fill in all required fields.', 'warning');
        return;
    }

    // Validate decimal number format
    const decimalInputs = document.querySelectorAll('input[name*="[value]"][pattern]');
    let hasInvalidDecimal = false;
    decimalInputs.forEach(input => {
        const value = input.value.trim();
        if (value && !(new RegExp(input.pattern).test(value))) {
            hasInvalidDecimal = true;
            input.style.border = '1px solid red';
        }
    });

    if (hasInvalidDecimal) {
        Swal.fire('Validation Error', 'Please correct the format of the decimal fields.', 'warning');
        return;
    }

    // Send data to the server
    fetch('../manager/product_feature_values.php', {
        method: 'POST',
        body: new FormData(featureForm)
    })
        .then(res => res.json())
        .then(response => {
            if (response.status === 'success') {
                Swal.fire({
                    icon: 'success',
                    title: 'Saved!',
                    text: response.message,
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => {
                    // Redirect back to the feature list page
                    window.location.href = 'dashboard.php?page=product_feature_values';
                });
            } else {
                Swal.fire('Error', response.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error saving features:', error);
            Swal.fire('Error', 'Failed to save features. Please try again.', 'error');
        });
});

</script>
